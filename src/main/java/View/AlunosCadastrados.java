package View;

import Controller.GerenciarAlunoController;
import Model.Academia;
import Model.Aluno;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

public class AlunosCadastrados extends javax.swing.JInternalFrame {
    
    private Academia academia;
    
    private GerenciarAlunoController controller;
    
    /**
     * Creates new form FuncionariosCadastrados
     */
    public AlunosCadastrados(Academia academia, GerenciarAlunoController controller) {
        initComponents();
        this.academia = academia;
        this.controller = controller;
        addLista(academia.getListaAlunos());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableAlunosCadastrados = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setClosable(true);
        setTitle("Alunos Cadastrados");

        jTableAlunosCadastrados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "Sobrenome", "CPF", "Endereço", "Telefone", "Email", "Cartão"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableAlunosCadastrados.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableAlunosCadastrados);

        jButton1.setText("Adicionar novo aluno");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Editar aluno selecionado");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Deletar aluno selecionado");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 825, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        CadastrarAluno cadastrarAluno = new CadastrarAluno(academia, controller);
        
        // Adicionando o WindowListener para chamar addLista ao fechar a janela
        cadastrarAluno.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                // Chama o método para atualizar a lista de alunos
                addLista(academia.getListaAlunos());
            }
        });

        // Exibe a janela de cadastro
        cadastrarAluno.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int linhaSelecionada = jTableAlunosCadastrados.getSelectedRow();
        
        if(linhaSelecionada == -1){
            JOptionPane.showMessageDialog(null, "Você não selecionou nenhum Aluno");
        }else{
            String id = jTableAlunosCadastrados.getValueAt(linhaSelecionada, 0).toString();
            String nome = jTableAlunosCadastrados.getValueAt(linhaSelecionada, 1).toString();
            String sobrenome = jTableAlunosCadastrados.getValueAt(linhaSelecionada, 2).toString();
            String cpf = jTableAlunosCadastrados.getValueAt(linhaSelecionada, 3).toString();
            String endereco = jTableAlunosCadastrados.getValueAt(linhaSelecionada, 4).toString();
            String telefone = jTableAlunosCadastrados.getValueAt(linhaSelecionada, 5).toString();
            String email = jTableAlunosCadastrados.getValueAt(linhaSelecionada, 6).toString();
            String cartao = jTableAlunosCadastrados.getValueAt(linhaSelecionada, 7).toString();
            EditarAluno editarAluno = new EditarAluno(id, nome, sobrenome, cpf, endereco, telefone, email, cartao, controller);

            // Adicionando o WindowListener para chamar addLista ao fechar a janela
            editarAluno.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosed(java.awt.event.WindowEvent windowEvent) {
                    // Chama o método para atualizar a lista de alunos
                    addLista(academia.getListaAlunos());
                }
            });

            // Exibe a janela de edição
            editarAluno.setVisible(true); 
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int linhaSelecionada = jTableAlunosCadastrados.getSelectedRow();
        
        if(linhaSelecionada == -1){
            JOptionPane.showMessageDialog(null, "Você não selecionou nenhum aluno");
        }else{
            int resposta = JOptionPane.showConfirmDialog(
                    null,
                    "Tem certeza que deseja remover o aluno?",
                    "Confirmar Remoção",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE
            );
            
            if(resposta == JOptionPane.YES_OPTION){
                controller.removeAluno(jTableAlunosCadastrados.getValueAt(linhaSelecionada, 3).toString());
                addLista(academia.getListaAlunos());
            }else{
                JOptionPane.showMessageDialog(null, "Não foi possível remover o aluno!");
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    public JTable getjTableAlunosCadastrados() {
        return jTableAlunosCadastrados;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableAlunosCadastrados;
    // End of variables declaration//GEN-END:variables

    /**
     * Método que formata a lista de funcionários para a tabela
     * @param list
     */
    public void addLista(ArrayList<Aluno> list){
        DefaultTableModel model = (DefaultTableModel) getjTableAlunosCadastrados().getModel();
        model.setRowCount(0);

        for (Aluno aluno : list) {
            Object rowData[] = new Object[8];
            rowData[0] = aluno.getId();
            rowData[1] = aluno.getNome();
            rowData[2] = aluno.getSobrenome();
            rowData[3] = aluno.getCpf();
            rowData[4] = aluno.getEndereco();
            rowData[5] = aluno.getTelefone();
            rowData[6] = aluno.getEmail();
            rowData[7] = aluno.getCartao();
            model.addRow(rowData);
        }
    }
    
    @Override
    public String toString(){
        return "View de AlunosCadastrados";
    }
}
