package View;

import Controller.GerenciarFuncionarioController;
import Model.Academia;
import Model.Funcionario;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

public class FuncionariosCadastrados extends javax.swing.JInternalFrame {
    
    private Academia academia;

    private GerenciarFuncionarioController controller;
    
    /**
     * Creates new form FuncionariosCadastrados
     * @param academia
     * @param controller
     */
    public FuncionariosCadastrados(Academia academia, GerenciarFuncionarioController controller) {
        initComponents();
        this.academia = academia;
        this.controller = controller;
        addLista(academia.getListaFuncionarios());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableFuncionariosCadastrados = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setClosable(true);
        setTitle("Funcionários Cadastrados");

        jTableFuncionariosCadastrados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "Sobrenome", "CPF", "Endereço", "Telefone", "Email", "Usuário", "Senha", "Salário", "Cargo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableFuncionariosCadastrados.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableFuncionariosCadastrados);

        jButton1.setText("Adicionar novo funcionário");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Editar funcionário selecionado");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Deletar funcionário selecionado");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 825, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        CadastrarFuncionario cadastrarFuncionario = new CadastrarFuncionario(academia, controller);
        
        // Adicionando o WindowListener para chamar addLista ao fechar a janela
        cadastrarFuncionario.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                // Chama o método para atualizar a lista de alunos
                addLista(academia.getListaFuncionarios());
            }
        });

        // Exibe a janela de cadastro
        cadastrarFuncionario.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int linhaSelecionada = jTableFuncionariosCadastrados.getSelectedRow();
        
        if(linhaSelecionada == -1){
            JOptionPane.showMessageDialog(null, "Você não selecionou nenhum funcionário");
        }else{
            String id = jTableFuncionariosCadastrados.getValueAt(linhaSelecionada, 0).toString();
            String nome = jTableFuncionariosCadastrados.getValueAt(linhaSelecionada, 1).toString();
            String sobrenome = jTableFuncionariosCadastrados.getValueAt(linhaSelecionada, 2).toString();
            String cpf = jTableFuncionariosCadastrados.getValueAt(linhaSelecionada, 3).toString();
            String endereco = jTableFuncionariosCadastrados.getValueAt(linhaSelecionada, 4).toString();
            String telefone = jTableFuncionariosCadastrados.getValueAt(linhaSelecionada, 5).toString();
            String email = jTableFuncionariosCadastrados.getValueAt(linhaSelecionada, 6).toString();
            String usuario = jTableFuncionariosCadastrados.getValueAt(linhaSelecionada, 7).toString();
            String senha = jTableFuncionariosCadastrados.getValueAt(linhaSelecionada, 8).toString();
            String salario = jTableFuncionariosCadastrados.getValueAt(linhaSelecionada, 9).toString();
            String cargo = jTableFuncionariosCadastrados.getValueAt(linhaSelecionada, 10).toString();
            EditarFuncionario editarFuncionario =  new EditarFuncionario(id, nome, sobrenome, cpf, endereco, telefone, email, usuario, senha, salario, cargo, controller);
            
            // Adicionando o WindowListener para chamar addLista ao fechar a janela
            editarFuncionario.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosed(java.awt.event.WindowEvent windowEvent) {
                    // Chama o método para atualizar a lista de alunos
                    addLista(academia.getListaFuncionarios());
                }
            });

            // Exibe a janela de edição
            editarFuncionario.setVisible(true);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int linhaSelecionada = jTableFuncionariosCadastrados.getSelectedRow();
        
        if(linhaSelecionada == -1){
            JOptionPane.showMessageDialog(null, "Você não selecionou nenhum funcionário");
        }else{
            int resposta = JOptionPane.showConfirmDialog(
                    null,
                    "Tem certeza que deseja remover o funcionario?",
                    "Confirmar Remoção",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE
            );
            
            if(resposta == JOptionPane.YES_OPTION){
                controller.removeFuncionario(jTableFuncionariosCadastrados.getValueAt(linhaSelecionada, 3).toString());
                addLista(academia.getListaFuncionarios());
            }else{
                JOptionPane.showMessageDialog(null, "Não foi possível remover o funcionario!");
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    public JTable getjTableFuncionariosCadastrados() {
        return jTableFuncionariosCadastrados;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableFuncionariosCadastrados;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Método que formata a lista de funcionários para a tabela
     * @param list
     */
    private void addLista(List<Funcionario> list){
        DefaultTableModel model = (DefaultTableModel) getjTableFuncionariosCadastrados().getModel();
        model.setRowCount(0);

        for (Funcionario funcionario : list) {
            Object rowData[] = new Object[11];
            rowData[0] = funcionario.getId();
            rowData[1] = funcionario.getNome();
            rowData[2] = funcionario.getSobrenome();
            rowData[3] = funcionario.getCpf();
            rowData[4] = funcionario.getEndereco();
            rowData[5] = funcionario.getTelefone();
            rowData[6] = funcionario.getEmail();
            rowData[7] = funcionario.getUsuario();
            rowData[8] = funcionario.getSenha();
            rowData[9] = funcionario.getSalario();
            rowData[10] = funcionario.getCargo();
            model.addRow(rowData);
        }
    }
    
    @Override
    public String toString(){
        return "View de FuncionariosCadastrados";
    }
}
